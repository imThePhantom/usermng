/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.usermanagement.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import com.liferay.usermanagement.model.UserInfo;
import com.liferay.usermanagement.service.UserInfoLocalService;
import com.liferay.usermanagement.service.persistence.DepartmentPersistence;
import com.liferay.usermanagement.service.persistence.UserInfoPersistence;
import com.liferay.usermanagement.service.persistence.WorkingTimePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the user info local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.usermanagement.service.impl.UserInfoLocalServiceImpl}.
 * </p>
 *
 * @author phantoan
 * @see com.liferay.usermanagement.service.impl.UserInfoLocalServiceImpl
 * @see com.liferay.usermanagement.service.UserInfoLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class UserInfoLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements UserInfoLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.usermanagement.service.UserInfoLocalServiceUtil} to access the user info local service.
	 */

	/**
	 * Adds the user info to the database. Also notifies the appropriate model listeners.
	 *
	 * @param userInfo the user info
	 * @return the user info that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserInfo addUserInfo(UserInfo userInfo) {
		userInfo.setNew(true);

		return userInfoPersistence.update(userInfo);
	}

	/**
	 * Creates a new user info with the primary key. Does not add the user info to the database.
	 *
	 * @param userCode the primary key for the new user info
	 * @return the new user info
	 */
	@Override
	public UserInfo createUserInfo(String userCode) {
		return userInfoPersistence.create(userCode);
	}

	/**
	 * Deletes the user info with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param userCode the primary key of the user info
	 * @return the user info that was removed
	 * @throws PortalException if a user info with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserInfo deleteUserInfo(String userCode) throws PortalException {
		return userInfoPersistence.remove(userCode);
	}

	/**
	 * Deletes the user info from the database. Also notifies the appropriate model listeners.
	 *
	 * @param userInfo the user info
	 * @return the user info that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public UserInfo deleteUserInfo(UserInfo userInfo) {
		return userInfoPersistence.remove(userInfo);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(UserInfo.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return userInfoPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.usermanagement.model.impl.UserInfoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return userInfoPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.usermanagement.model.impl.UserInfoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return userInfoPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return userInfoPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return userInfoPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public UserInfo fetchUserInfo(String userCode) {
		return userInfoPersistence.fetchByPrimaryKey(userCode);
	}

	/**
	 * Returns the user info matching the UUID and group.
	 *
	 * @param uuid the user info's UUID
	 * @param groupId the primary key of the group
	 * @return the matching user info, or <code>null</code> if a matching user info could not be found
	 */
	@Override
	public UserInfo fetchUserInfoByUuidAndGroupId(String uuid, long groupId) {
		return userInfoPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the user info with the primary key.
	 *
	 * @param userCode the primary key of the user info
	 * @return the user info
	 * @throws PortalException if a user info with the primary key could not be found
	 */
	@Override
	public UserInfo getUserInfo(String userCode) throws PortalException {
		return userInfoPersistence.findByPrimaryKey(userCode);
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return userInfoLocalService.deleteUserInfo((UserInfo)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return userInfoPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the user infos matching the UUID and company.
	 *
	 * @param uuid the UUID of the user infos
	 * @param companyId the primary key of the company
	 * @return the matching user infos, or an empty list if no matches were found
	 */
	@Override
	public List<UserInfo> getUserInfosByUuidAndCompanyId(String uuid,
		long companyId) {
		return userInfoPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of user infos matching the UUID and company.
	 *
	 * @param uuid the UUID of the user infos
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of user infos
	 * @param end the upper bound of the range of user infos (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching user infos, or an empty list if no matches were found
	 */
	@Override
	public List<UserInfo> getUserInfosByUuidAndCompanyId(String uuid,
		long companyId, int start, int end,
		OrderByComparator<UserInfo> orderByComparator) {
		return userInfoPersistence.findByUuid_C(uuid, companyId, start, end,
			orderByComparator);
	}

	/**
	 * Returns the user info matching the UUID and group.
	 *
	 * @param uuid the user info's UUID
	 * @param groupId the primary key of the group
	 * @return the matching user info
	 * @throws PortalException if a matching user info could not be found
	 */
	@Override
	public UserInfo getUserInfoByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {
		return userInfoPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the user infos.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.usermanagement.model.impl.UserInfoModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of user infos
	 * @param end the upper bound of the range of user infos (not inclusive)
	 * @return the range of user infos
	 */
	@Override
	public List<UserInfo> getUserInfos(int start, int end) {
		return userInfoPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of user infos.
	 *
	 * @return the number of user infos
	 */
	@Override
	public int getUserInfosCount() {
		return userInfoPersistence.countAll();
	}

	/**
	 * Updates the user info in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param userInfo the user info
	 * @return the user info that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public UserInfo updateUserInfo(UserInfo userInfo) {
		return userInfoPersistence.update(userInfo);
	}

	/**
	 * Returns the department local service.
	 *
	 * @return the department local service
	 */
	public com.liferay.usermanagement.service.DepartmentLocalService getDepartmentLocalService() {
		return departmentLocalService;
	}

	/**
	 * Sets the department local service.
	 *
	 * @param departmentLocalService the department local service
	 */
	public void setDepartmentLocalService(
		com.liferay.usermanagement.service.DepartmentLocalService departmentLocalService) {
		this.departmentLocalService = departmentLocalService;
	}

	/**
	 * Returns the department persistence.
	 *
	 * @return the department persistence
	 */
	public DepartmentPersistence getDepartmentPersistence() {
		return departmentPersistence;
	}

	/**
	 * Sets the department persistence.
	 *
	 * @param departmentPersistence the department persistence
	 */
	public void setDepartmentPersistence(
		DepartmentPersistence departmentPersistence) {
		this.departmentPersistence = departmentPersistence;
	}

	/**
	 * Returns the user info local service.
	 *
	 * @return the user info local service
	 */
	public UserInfoLocalService getUserInfoLocalService() {
		return userInfoLocalService;
	}

	/**
	 * Sets the user info local service.
	 *
	 * @param userInfoLocalService the user info local service
	 */
	public void setUserInfoLocalService(
		UserInfoLocalService userInfoLocalService) {
		this.userInfoLocalService = userInfoLocalService;
	}

	/**
	 * Returns the user info persistence.
	 *
	 * @return the user info persistence
	 */
	public UserInfoPersistence getUserInfoPersistence() {
		return userInfoPersistence;
	}

	/**
	 * Sets the user info persistence.
	 *
	 * @param userInfoPersistence the user info persistence
	 */
	public void setUserInfoPersistence(UserInfoPersistence userInfoPersistence) {
		this.userInfoPersistence = userInfoPersistence;
	}

	/**
	 * Returns the working time local service.
	 *
	 * @return the working time local service
	 */
	public com.liferay.usermanagement.service.WorkingTimeLocalService getWorkingTimeLocalService() {
		return workingTimeLocalService;
	}

	/**
	 * Sets the working time local service.
	 *
	 * @param workingTimeLocalService the working time local service
	 */
	public void setWorkingTimeLocalService(
		com.liferay.usermanagement.service.WorkingTimeLocalService workingTimeLocalService) {
		this.workingTimeLocalService = workingTimeLocalService;
	}

	/**
	 * Returns the working time persistence.
	 *
	 * @return the working time persistence
	 */
	public WorkingTimePersistence getWorkingTimePersistence() {
		return workingTimePersistence;
	}

	/**
	 * Sets the working time persistence.
	 *
	 * @param workingTimePersistence the working time persistence
	 */
	public void setWorkingTimePersistence(
		WorkingTimePersistence workingTimePersistence) {
		this.workingTimePersistence = workingTimePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.usermanagement.model.UserInfo",
			userInfoLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.usermanagement.model.UserInfo");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return UserInfoLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return UserInfo.class;
	}

	protected String getModelClassName() {
		return UserInfo.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = userInfoPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.usermanagement.service.DepartmentLocalService.class)
	protected com.liferay.usermanagement.service.DepartmentLocalService departmentLocalService;
	@BeanReference(type = DepartmentPersistence.class)
	protected DepartmentPersistence departmentPersistence;
	@BeanReference(type = UserInfoLocalService.class)
	protected UserInfoLocalService userInfoLocalService;
	@BeanReference(type = UserInfoPersistence.class)
	protected UserInfoPersistence userInfoPersistence;
	@BeanReference(type = com.liferay.usermanagement.service.WorkingTimeLocalService.class)
	protected com.liferay.usermanagement.service.WorkingTimeLocalService workingTimeLocalService;
	@BeanReference(type = WorkingTimePersistence.class)
	protected WorkingTimePersistence workingTimePersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}