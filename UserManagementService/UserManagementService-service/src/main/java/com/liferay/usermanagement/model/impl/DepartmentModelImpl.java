/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.usermanagement.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.liferay.usermanagement.model.Department;
import com.liferay.usermanagement.model.DepartmentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Department service. Represents a row in the &quot;CRM_Department&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DepartmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DepartmentImpl}.
 * </p>
 *
 * @author phantoan
 * @see DepartmentImpl
 * @see Department
 * @see DepartmentModel
 * @generated
 */
@ProviderType
public class DepartmentModelImpl extends BaseModelImpl<Department>
	implements DepartmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a department model instance should use the {@link Department} interface instead.
	 */
	public static final String TABLE_NAME = "CRM_Department";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "departmentCode", Types.VARCHAR },
			{ "deapartmentName", Types.VARCHAR },
			{ "leaderCode", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("departmentCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deapartmentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("leaderCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table CRM_Department (uuid_ VARCHAR(75) null,departmentCode VARCHAR(75) not null primary key,deapartmentName VARCHAR(75) null,leaderCode VARCHAR(75) null,description VARCHAR(75) null,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table CRM_Department";
	public static final String ORDER_BY_JPQL = " ORDER BY department.departmentCode ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CRM_Department.departmentCode ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.usermanagement.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.liferay.usermanagement.model.Department"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.usermanagement.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.liferay.usermanagement.model.Department"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.usermanagement.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.liferay.usermanagement.model.Department"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long DEPARTMENTCODE_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.usermanagement.service.util.PropsUtil.get(
				"lock.expiration.time.com.liferay.usermanagement.model.Department"));

	public DepartmentModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _departmentCode;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setDepartmentCode(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _departmentCode;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Department.class;
	}

	@Override
	public String getModelClassName() {
		return Department.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("departmentCode", getDepartmentCode());
		attributes.put("deapartmentName", getDeapartmentName());
		attributes.put("leaderCode", getLeaderCode());
		attributes.put("description", getDescription());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		String departmentCode = (String)attributes.get("departmentCode");

		if (departmentCode != null) {
			setDepartmentCode(departmentCode);
		}

		String deapartmentName = (String)attributes.get("deapartmentName");

		if (deapartmentName != null) {
			setDeapartmentName(deapartmentName);
		}

		String leaderCode = (String)attributes.get("leaderCode");

		if (leaderCode != null) {
			setLeaderCode(leaderCode);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public String getDepartmentCode() {
		if (_departmentCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _departmentCode;
		}
	}

	@Override
	public void setDepartmentCode(String departmentCode) {
		_departmentCode = departmentCode;
	}

	@Override
	public String getDeapartmentName() {
		if (_deapartmentName == null) {
			return StringPool.BLANK;
		}
		else {
			return _deapartmentName;
		}
	}

	@Override
	public void setDeapartmentName(String deapartmentName) {
		_deapartmentName = deapartmentName;
	}

	@Override
	public String getLeaderCode() {
		if (_leaderCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _leaderCode;
		}
	}

	@Override
	public void setLeaderCode(String leaderCode) {
		_leaderCode = leaderCode;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Department.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Department toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Department)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DepartmentImpl departmentImpl = new DepartmentImpl();

		departmentImpl.setUuid(getUuid());
		departmentImpl.setDepartmentCode(getDepartmentCode());
		departmentImpl.setDeapartmentName(getDeapartmentName());
		departmentImpl.setLeaderCode(getLeaderCode());
		departmentImpl.setDescription(getDescription());
		departmentImpl.setGroupId(getGroupId());
		departmentImpl.setCompanyId(getCompanyId());
		departmentImpl.setCreateDate(getCreateDate());
		departmentImpl.setModifiedDate(getModifiedDate());

		departmentImpl.resetOriginalValues();

		return departmentImpl;
	}

	@Override
	public int compareTo(Department department) {
		String primaryKey = department.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Department)) {
			return false;
		}

		Department department = (Department)obj;

		String primaryKey = department.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DepartmentModelImpl departmentModelImpl = this;

		departmentModelImpl._originalUuid = departmentModelImpl._uuid;

		departmentModelImpl._originalGroupId = departmentModelImpl._groupId;

		departmentModelImpl._setOriginalGroupId = false;

		departmentModelImpl._originalCompanyId = departmentModelImpl._companyId;

		departmentModelImpl._setOriginalCompanyId = false;

		departmentModelImpl._setModifiedDate = false;

		departmentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Department> toCacheModel() {
		DepartmentCacheModel departmentCacheModel = new DepartmentCacheModel();

		departmentCacheModel.uuid = getUuid();

		String uuid = departmentCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			departmentCacheModel.uuid = null;
		}

		departmentCacheModel.departmentCode = getDepartmentCode();

		String departmentCode = departmentCacheModel.departmentCode;

		if ((departmentCode != null) && (departmentCode.length() == 0)) {
			departmentCacheModel.departmentCode = null;
		}

		departmentCacheModel.deapartmentName = getDeapartmentName();

		String deapartmentName = departmentCacheModel.deapartmentName;

		if ((deapartmentName != null) && (deapartmentName.length() == 0)) {
			departmentCacheModel.deapartmentName = null;
		}

		departmentCacheModel.leaderCode = getLeaderCode();

		String leaderCode = departmentCacheModel.leaderCode;

		if ((leaderCode != null) && (leaderCode.length() == 0)) {
			departmentCacheModel.leaderCode = null;
		}

		departmentCacheModel.description = getDescription();

		String description = departmentCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			departmentCacheModel.description = null;
		}

		departmentCacheModel.groupId = getGroupId();

		departmentCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			departmentCacheModel.createDate = createDate.getTime();
		}
		else {
			departmentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			departmentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			departmentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return departmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", departmentCode=");
		sb.append(getDepartmentCode());
		sb.append(", deapartmentName=");
		sb.append(getDeapartmentName());
		sb.append(", leaderCode=");
		sb.append(getLeaderCode());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.liferay.usermanagement.model.Department");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departmentCode</column-name><column-value><![CDATA[");
		sb.append(getDepartmentCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deapartmentName</column-name><column-value><![CDATA[");
		sb.append(getDeapartmentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaderCode</column-name><column-value><![CDATA[");
		sb.append(getLeaderCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Department.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Department.class
		};
	private String _uuid;
	private String _originalUuid;
	private String _departmentCode;
	private String _deapartmentName;
	private String _leaderCode;
	private String _description;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private Department _escapedModel;
}